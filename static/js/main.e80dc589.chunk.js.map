{"version":3,"sources":["components/Btn.tsx","BLL/counter-reducer.ts","components/InputCounterValue.tsx","components/CounterSettings.tsx","components/CounterTableau.tsx","App.tsx","BLL/store.ts","BLL/localStorage.ts","index.tsx"],"names":["Btn","props","disabled","btnDisabled","onClick","onClickHandler","className","btnValue","initialState","value","minValue","maxValue","InputCounterValue","valueType","isError","type","onChange","onChangeHandler","valueSet","CounterSettings","useSelector","state","counter","dispatch","useDispatch","setValue","setIsCounting","newValue","event","newMaxValue","currentTarget","valueAsNumber","setIsError","setMaxValueAC","newMinValue","setMinValueAC","isCounting","CounterTableau","resetValueAC","App","useState","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e80dc589.chunk.js","sourcesContent":["import React from \"react\";\n\ntype BtnPropsType = {\n  btnValue: string;\n  btnDisabled: boolean;\n  onClickHandler: () => void;\n};\n\nexport function Btn(props: BtnPropsType) {\n  return (\n    <button\n      disabled={props.btnDisabled}\n      onClick={props.onClickHandler}\n      className={props.btnDisabled ? \"btn-disabled\" : \"btn\"}\n    >\n      {props.btnValue}\n    </button>\n  );\n}\n","type InitialStateType = typeof initialState;\ntype ActionTypes =\n  | ReturnType<typeof incValueAC>\n  | ReturnType<typeof resetValueAC>\n  | ReturnType<typeof setValueAC>\n  | ReturnType<typeof setMinValueAC>\n  | ReturnType<typeof setMaxValueAC>;\n\nexport const incValueAC = () =>\n  ({\n    type: \"INC-COUNTER-VALUE\",\n  } as const);\nexport const resetValueAC = (minValue: number) =>\n  ({\n    type: \"RESET-COUNTER-VALUE\",\n    minValue,\n  } as const);\nexport const setValueAC = (newValue: number) =>\n  ({\n    type: \"SET-VALUE\",\n    newValue,\n  } as const);\nexport const setMinValueAC = (newMinValue: number) =>\n  ({\n    type: \"SET-MIN-VALUE\",\n    newMinValue,\n  } as const);\nexport const setMaxValueAC = (newMaxValue: number) =>\n  ({\n    type: \"SET-MAX-VALUE\",\n    newMaxValue,\n  } as const);\n\nconst initialState = {\n  value: 0,\n  minValue: 0,\n  maxValue: 5,\n};\n\nexport const counterReducer = (\n  state: InitialStateType = initialState,\n  action: ActionTypes\n): InitialStateType => {\n  switch (action.type) {\n    case \"INC-COUNTER-VALUE\":\n      return { ...state, value: state.value + 1 };\n\n    case \"RESET-COUNTER-VALUE\":\n      return { ...state, value: action.minValue };\n\n    case \"SET-VALUE\":\n      return { ...state, value: action.newValue };\n\n    case \"SET-MIN-VALUE\":\n      return { ...state, minValue: action.newMinValue };\n\n    case \"SET-MAX-VALUE\":\n      return { ...state, maxValue: action.newMaxValue };\n\n    default:\n      return state;\n  }\n};\n","import React, { ChangeEvent } from \"react\";\n\ntype InputCounterValuePropsType = {\n  valueType: string;\n  valueSet: number;\n  isError: boolean;\n  onChangeHandler: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const InputCounterValue = (props: InputCounterValuePropsType) => {\n  return (\n    <div>\n      <span className={\"value-line\"}>{props.valueType}</span>\n      <input\n        className={props.isError ? \"input-error\" : \"input-line\"}\n        type={\"number\"}\n        onChange={props.onChangeHandler}\n        value={props.valueSet}\n      />\n    </div>\n  );\n};\n","import React, { ChangeEvent } from \"react\";\nimport { Btn } from \"./Btn\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppStateType } from \"../BLL/store\";\nimport {\n  setMaxValueAC,\n  setMinValueAC,\n  setValueAC,\n} from \"../BLL/counter-reducer\";\nimport { InputCounterValue } from \"./InputCounterValue\";\nimport { Dispatch } from \"redux\";\n\ntype CounterSettingsPropsType = {\n  isCounting: boolean;\n  setIsCounting: (newIsCounting: boolean) => void;\n  isError: boolean;\n  setIsError: (newIsError: boolean) => void;\n};\n\nexport function CounterSettings(props: CounterSettingsPropsType) {\n  const minValue = useSelector<AppStateType, number>(\n    (state) => state.counter.minValue\n  );\n  const maxValue = useSelector<AppStateType, number>(\n    (state) => state.counter.maxValue\n  );\n  const dispatch = useDispatch<Dispatch>();\n\n  const setValue = () => {\n    props.setIsCounting(true);\n    dispatch(setValueAC(minValue));\n  };\n\n  const setNewMaxValue = (event: ChangeEvent<HTMLInputElement>) => {\n    props.setIsCounting(false);\n\n    const newMaxValue = event.currentTarget.valueAsNumber;\n\n    if (newMaxValue < 1 || newMaxValue <= minValue) {\n      props.setIsError(true);\n    } else if (newMaxValue >= 1 && newMaxValue > minValue) {\n      props.setIsError(false);\n      dispatch(setMaxValueAC(newMaxValue));\n    }\n  };\n\n  const setNewMinValue = (event: ChangeEvent<HTMLInputElement>) => {\n    props.setIsCounting(false);\n\n    const newMinValue = event.currentTarget.valueAsNumber;\n\n    if (newMinValue < 0 || maxValue <= newMinValue) {\n      props.setIsError(true);\n    } else if (newMinValue >= 0 && maxValue > newMinValue) {\n      props.setIsError(false);\n      dispatch(setMinValueAC(newMinValue));\n    }\n  };\n\n  return (\n    <div className={\"box left-box\"}>\n      <div>\n        <div className={\"settings-bar\"}>\n          <InputCounterValue\n            valueType={\"max value:\"}\n            valueSet={maxValue}\n            isError={props.isError}\n            onChangeHandler={setNewMaxValue}\n          />\n          <InputCounterValue\n            valueType={\"min value:\"}\n            valueSet={minValue}\n            isError={props.isError}\n            onChangeHandler={setNewMinValue}\n          />\n        </div>\n        <div>\n          {props.isCounting ? (\n            <Btn\n              btnValue={\"set\"}\n              btnDisabled={true}\n              onClickHandler={setValue}\n            />\n          ) : (\n            <Btn\n              btnValue={\"set\"}\n              btnDisabled={props.isError}\n              onClickHandler={setValue}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Btn } from \"./Btn\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppStateType } from \"../BLL/store\";\nimport { incValueAC, resetValueAC } from \"../BLL/counter-reducer\";\nimport { Dispatch } from \"redux\";\n\ntype CounterTableauPropsType = {\n  isCounting: boolean;\n  isError: boolean;\n};\n\nexport function CounterTableau(props: CounterTableauPropsType) {\n  const value = useSelector<AppStateType, number>(\n    (state) => state.counter.value\n  );\n  const minValue = useSelector<AppStateType, number>(\n    (state) => state.counter.minValue\n  );\n  const maxValue = useSelector<AppStateType, number>(\n    (state) => state.counter.maxValue\n  );\n  const dispatch = useDispatch<Dispatch>();\n\n  const incValue = () => {\n    if (value < maxValue) {\n      dispatch(incValueAC());\n    }\n  };\n\n  const resetValue = () => {\n    dispatch(resetValueAC(minValue));\n  };\n\n  return (\n    <div className={\"box\"}>\n      {props.isCounting ? (\n        <div className={value === maxValue ? \"tableau-max\" : \"tableau\"}>\n          {value}\n        </div>\n      ) : (\n        <div className={\"tableau-disabled\"}>\n          <span className={props.isError ? \"text-error\" : \"text-disabled\"}>\n            {props.isError\n              ? \"Incorrect value!\"\n              : `Enter values and press \"set\"`}\n          </span>\n        </div>\n      )}\n      <div>\n        <Btn\n          btnValue={\"inc\"}\n          onClickHandler={incValue}\n          btnDisabled={!props.isCounting ? true : value === maxValue}\n        />\n        <Btn\n          btnValue={\"reset\"}\n          onClickHandler={resetValue}\n          btnDisabled={!props.isCounting ? true : value === minValue}\n        />\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { CounterSettings } from \"./components/CounterSettings\";\nimport { CounterTableau } from \"./components/CounterTableau\";\n\nexport const App = () => {\n  const [isCounting, setIsCounting] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n\n  return (\n    <div>\n      <CounterSettings\n        isCounting={isCounting}\n        setIsCounting={setIsCounting}\n        isError={isError}\n        setIsError={setIsError}\n      />\n      <CounterTableau isCounting={isCounting} isError={isError} />\n    </div>\n  );\n};\n","import { combineReducers, createStore } from \"redux\";\nimport { counterReducer } from \"./counter-reducer\";\nimport { loadState, saveState } from \"./localStorage\";\n\ntype StoreType = typeof store;\nexport type AppStateType = ReturnType<typeof rootReducer>;\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n});\n\nexport const store = createStore(rootReducer, loadState());\n\nstore.subscribe(() => {\n  saveState({\n    counter: store.getState().counter,\n  });\n}); // callback called on each store change\n","import { AppStateType } from \"./store\";\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (!serializedState) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: AppStateType) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch {\n    // ignore write errors\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./BLL/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}